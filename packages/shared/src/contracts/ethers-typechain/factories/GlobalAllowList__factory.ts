/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Provider } from '@ethersproject/providers';
import { Contract, Signer, utils } from 'ethers';
import type {
  GlobalAllowList,
  GlobalAllowListInterface,
} from '../GlobalAllowList.js';

const _abi = [
  {
    type: 'constructor',
    stateMutability: 'nonpayable',
    inputs: [
      {
        name: '_coordinator',
        type: 'address',
        internalType: 'contract Coordinator',
      },
    ],
  },
  {
    type: 'error',
    name: 'ECDSAInvalidSignature',
    inputs: [],
  },
  {
    type: 'error',
    name: 'ECDSAInvalidSignatureLength',
    inputs: [
      {
        name: 'length',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
  },
  {
    type: 'error',
    name: 'ECDSAInvalidSignatureS',
    inputs: [
      {
        name: 's',
        type: 'bytes32',
        internalType: 'bytes32',
      },
    ],
  },
  {
    type: 'error',
    name: 'InvalidInitialization',
    inputs: [],
  },
  {
    type: 'error',
    name: 'NotInitializing',
    inputs: [],
  },
  {
    type: 'event',
    name: 'AddressAuthorizationSet',
    inputs: [
      {
        name: 'ritualId',
        type: 'uint32',
        internalType: 'uint32',
        indexed: true,
      },
      {
        name: '_address',
        type: 'address',
        internalType: 'address',
        indexed: true,
      },
      {
        name: 'isAuthorized',
        type: 'bool',
        internalType: 'bool',
        indexed: false,
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'Initialized',
    inputs: [
      {
        name: 'version',
        type: 'uint64',
        internalType: 'uint64',
        indexed: false,
      },
    ],
    anonymous: false,
  },
  {
    type: 'function',
    name: 'MAX_AUTH_ACTIONS',
    stateMutability: 'view',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint32',
        internalType: 'uint32',
      },
    ],
  },
  {
    type: 'function',
    name: 'authActions',
    stateMutability: 'view',
    inputs: [
      {
        name: '',
        type: 'uint32',
        internalType: 'uint32',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
  },
  {
    type: 'function',
    name: 'authorize',
    stateMutability: 'nonpayable',
    inputs: [
      {
        name: 'ritualId',
        type: 'uint32',
        internalType: 'uint32',
      },
      {
        name: 'addresses',
        type: 'address[]',
        internalType: 'address[]',
      },
    ],
    outputs: [],
  },
  {
    type: 'function',
    name: 'coordinator',
    stateMutability: 'view',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract Coordinator',
      },
    ],
  },
  {
    type: 'function',
    name: 'deauthorize',
    stateMutability: 'nonpayable',
    inputs: [
      {
        name: 'ritualId',
        type: 'uint32',
        internalType: 'uint32',
      },
      {
        name: 'addresses',
        type: 'address[]',
        internalType: 'address[]',
      },
    ],
    outputs: [],
  },
  {
    type: 'function',
    name: 'isAddressAuthorized',
    stateMutability: 'view',
    inputs: [
      {
        name: 'ritualId',
        type: 'uint32',
        internalType: 'uint32',
      },
      {
        name: 'encryptor',
        type: 'address',
        internalType: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
        internalType: 'bool',
      },
    ],
  },
  {
    type: 'function',
    name: 'isAuthorized',
    stateMutability: 'view',
    inputs: [
      {
        name: 'ritualId',
        type: 'uint32',
        internalType: 'uint32',
      },
      {
        name: 'evidence',
        type: 'bytes',
        internalType: 'bytes',
      },
      {
        name: 'ciphertextHeader',
        type: 'bytes',
        internalType: 'bytes',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'bool',
        internalType: 'bool',
      },
    ],
  },
] as const;

export class GlobalAllowList__factory {
  static readonly abi = _abi;
  static createInterface(): GlobalAllowListInterface {
    return new utils.Interface(_abi) as GlobalAllowListInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): GlobalAllowList {
    return new Contract(address, _abi, signerOrProvider) as GlobalAllowList;
  }
}
